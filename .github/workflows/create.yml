name: Create Isolated Database

on:
  push:
    branches: 
      - 'feature/**'
  workflow_dispatch:

jobs:
  create:
    name: Create Database
    runs-on: ubuntu-latest
    env:
      OP_DEF_PWD: ${{ secrets.FT_DEFAULT_ADMIN_PASSWORD }}
      BRANCH_REF: ${{ github.ref }}
      COMPARTMENT_OCID: ${{ secrets.OCI_COMPARTMENT_OCID }}

    outputs:
      idname: ${{ steps.getname.outputs.idname }}
      ipaddress: ${{ steps.getaddress.outputs.ipaddress }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Retrieve ID
      id: getname
      run: echo "idname=$(python scripts/run_util.py id "$BRANCH_REF")" >> "$GITHUB_OUTPUT"

    - name: Set up Kustomize
      run: |
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    - name: Setup OCI CLI and Configure kubectl
      run: |
        echo "=== Starting OCI CLI setup ==="
        bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)" -- --accept-all-defaults
        export PATH="$HOME/bin:$PATH"
        echo "$HOME/bin" >> $GITHUB_PATH
        echo "✅ OCI CLI installed"
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_CLI_KEY_CONTENT }}" > ~/.oci/key.pem
        chmod 600 ~/.oci/key.pem
        echo "✅ Key file created"
        if openssl rsa -check -noout -in ~/.oci/key.pem 2>/dev/null; then
          echo "✅ Private key is valid"
        else
          echo "❌ Private key is invalid"
          exit 1
        fi
        FINGERPRINT=$(openssl rsa -pubout -outform DER -in ~/.oci/key.pem 2>/dev/null | openssl md5 -c | awk -F'= ' '{print $2}')
        echo "Generated fingerprint: $FINGERPRINT"
        cat > ~/.oci/config << EOF
        [DEFAULT]
        user=${{ secrets.OCI_CLI_USER }}
        fingerprint=${FINGERPRINT}
        tenancy=${{ secrets.OCI_CLI_TENANCY }}
        region=${{ secrets.OCI_REGION }}
        key_file=$HOME/.oci/key.pem
        EOF
        chmod 600 ~/.oci/config
        echo "✅ OCI config created"
        echo "Testing OCI authentication..."
        $HOME/bin/oci iam user get --user-id '${{ secrets.OCI_CLI_USER }}' --query 'data.name'
        echo "✅ OCI authentication successful"
        echo "Configuring kubectl..."
        mkdir -p ~/.kube
        $HOME/bin/oci ce cluster create-kubeconfig \
          --cluster-id ${{ secrets.OKE_CLUSTER_OCID }} \
          --file ~/.kube/config \
          --region '${{ secrets.OCI_REGION }}' \
          --token-version 2.0.0
        echo "✅ kubectl configured successfully"

    - name: Check Nodes
      run: kubectl get nodes -A

    - name: Create Kubernetes resources
      run: |
        kubectl create namespace feature-${{ steps.getname.outputs.idname }}
        kubectl create secret -n feature-${{ steps.getname.outputs.idname }} generic default-admin-password --from-literal=oracle_pwd="$OP_DEF_PWD"

    - name: Deploy SIDB
      run: |
        kustomize create --resources base/sidb-free-lite
        kustomize edit set namesuffix ${{ steps.getname.outputs.idname }}
        kustomize edit set namespace feature-${{ steps.getname.outputs.idname }}
        kustomize build . | kubectl apply -f -

    - name: Wait for Database
      id: getready
      run: ./scripts/checkdb.sh ${{ steps.getname.outputs.idname }}
    
    - name: Retrieve IP
      id: getaddress
      run: echo "ipaddress=$(kubectl get -n feature-${{ steps.getname.outputs.idname }} singleinstancedatabase db-${{ steps.getname.outputs.idname }} -o 'jsonpath={.status.pdbConnectString}')" >> "$GITHUB_OUTPUT"

  setup_users:
    name: Setup Database Schemas
    runs-on: ubuntu-latest
    needs: create
    env:
      DB_PWD: ${{ secrets.FT_DEFAULT_ADMIN_PASSWORD }}
      DB_USER: ${{ secrets.DB_WALLET_PASSWORD }}
      DB_IP: ${{ needs.create.outputs.ipaddress }}
    outputs:
      schemas: ${{ steps.getschemas.outputs.schemas }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Run LB as system
      uses: liquibase-github-actions/update@v4.23.2
      with:
        changelogFile: "changelog.xml"
        url: ${{ format('jdbc:oracle:thin:@//{0}', env.DB_IP) }}
        username: "system"
        password: ${{ env.DB_PWD }}
        searchPath: "/github/workspace/liquibase/admin"
        
    - name: List Schemas to Loop Through
      id: getschemas
      run: echo "schemas=$(python scripts/run_util.py schemas liquibase)" >> "$GITHUB_OUTPUT"

  setup_tables:
    name: Setup Database Tables
    runs-on: ubuntu-latest
    needs: [setup_users, create]
    strategy:
      matrix: ${{ fromJson(needs.setup_users.outputs.schemas) }}
    env:
      DB_PWD: ${{ secrets.FT_DEFAULT_ADMIN_PASSWORD }}
      DB_USER: ${{ secrets.DB_WALLET_PASSWORD }}
      DB_IP: ${{ needs.create.outputs.ipaddress }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Run LB as User
      uses: liquibase-github-actions/update@v4.23.2
      with:
        changelogFile: "changelog.xml"
        url: ${{ format('jdbc:oracle:thin:@//{0}', env.DB_IP) }}
        username: ${{ format('system[{0}]', matrix.schemas) }}
        password: ${{ env.DB_PWD }}
        searchPath: ${{ format('/github/workspace/liquibase/{0}', matrix.schemas) }}
